{{ if .Values.provision.spilo.enabled }}
{{- $name := printf "%s-spilo" .Release.Name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/part-of: {{ include "appName" . }}
      app.kubernetes.io/component: database
      app.kubernetes.io/name: {{ include "spilo.podLabel" . }}
  template:
    metadata:
      name: {{ $name }}
      labels:
        app.kubernetes.io/part-of: {{ include "appName" . }}
        app.kubernetes.io/component: database
        app.kubernetes.io/name: {{ include "spilo.podLabel" . }}
    spec:
      {{- $dataVolumeName := "data" }}
      volumes:
        - name: {{ $dataVolumeName }}
          persistentVolumeClaim:
            claimName: {{ include "spilo.pvcName" . }}
      {{- if .Values.registryAuth.enabled }}
      imagePullSecrets:
        - name: {{ include "registry.secretName" . }}
      {{- end }}
      {{- if .Values.provision.spilo.tolerateLowMemory }}
      tolerations:
        - key: "node.kubernetes.io/memory-pressure"
          operator: "Exists"
          effect: "NoSchedule"
      {{- end }}
      containers:
        - name: main
          image: {{ .Values.provision.spilo.image | quote }}
          imagePullPolicy: Always
          ports:
            - name: tcp
              containerPort: {{ .Values.database.port }}
          env:
            - name: PGUSER_SUPERUSER
              value: {{ .Values.database.username | quote }}
            - name: PGPASSWORD_SUPERUSER
              value: {{ .Values.database.password | quote }}
            - name: SPILO_PROVIDER
              value: local
            - name: SPILO_CONFIGURATION
              value: |
                bootstrap:
                  dcs:
                    postgresql:
                      parameters:
                        max_locks_per_transaction: 512
                postgresql:
                  parameters:
                    shared_buffers: 2GB
                    max_locks_per_transaction: 512
                    work_mem: "256MB"
          volumeMounts:
            - name: {{ $dataVolumeName }}
              mountPath: "/home/postgres/pgdata"
          readinessProbe:
            exec:
              command: ["pg_isready", "-U", "postgres", "-h", "localhost"]
            initialDelaySeconds: 10
            periodSeconds: 5
{{- end }}
